"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudConformity = void 0;
const axios_1 = __importDefault(require("axios"));
class CloudConformity {
    constructor(apikey) {
        this.generateRequest = (method, path, data) => {
            return {
                baseURL: this.url,
                url: path,
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + this.apikey
                },
                responseType: 'json',
                ...data && { data: data }
            };
        };
        this.parseAxiosOutput = (axiosOutput) => {
            return axiosOutput.data.data;
        };
        this.url = "https://api.xdr.trendmicro.com/beta/cloudPosture/";
        this.apikey = apikey;
    }
    ;
    async listAllAccounts() {
        return await this.ccRequest("GET", "accounts");
    }
    ;
    async getAccountDetails(id) {
        return await this.ccRequest("GET", "accounts/" + id);
    }
    ;
    async getAccountScanSetting(id) {
        return await this.ccRequest("GET", "accounts/" + id + "/scanSetting");
    }
    ;
    async scanAccount(ccAccountId) {
        return await this.ccRequest("POST", "accounts/" + ccAccountId + "/scan");
    }
    ;
    async updateAccount(ccAccountId, environment, tags) {
        const data = {
            "environment": environment,
            "tags": tags
        };
        return await this.ccRequest("PATCH", "accounts/" + ccAccountId, data);
    }
    ;
    /**
     * @TODO: Implement notes
     * @param ccAccountId target account id
     * @param ruleId target rule id
     * @param notes optional parameter to get notes for the specified rule setting
     */
    async getRuleSetting(ccAccountId, ruleId) {
        return await this.ccRequest("GET", "accounts/" + ccAccountId + "/scanRules/" + ruleId);
    }
    ;
    // Template Scanner API
    async listTemplateScannerRules(type) {
        const basePath = "cloudformationTemplateScannerRules";
        const path = type ? `${basePath}?type=${type}` : basePath;
        const result = await this.ccRequest("GET", path);
        return result;
    }
    async scanATemplate(template, type, accountId) {
        const data = {
            "type": type,
            ...accountId && { "accountId": accountId },
            "content": template
        };
        return (await this.ccRequest("POST", "scanTemplate", data));
    }
    async scanACloudFormationTemplate(template, accountId) {
        return (await this.scanATemplate(template, "cloudformation-template", accountId));
    }
    async scanATerraformTemplate(template, accountId) {
        return (await this.scanATemplate(template, "terraform-template", accountId));
    }
    async scanATemplateAndReturnAsArrays(template, type, accountId) {
        const data = await this.scanATemplate(template, type, accountId);
        try {
            const success = data.filter((entry) => entry.status === "SUCCESS");
            const failure = data.filter((entry) => entry.status === "FAILURE");
            return {
                success,
                failure
            };
        }
        catch (error) {
            return {
                success: [],
                failure: []
            };
        }
    }
    async scanACloudFormationTemplateAndReturAsArrays(template, accountId) {
        return await this.scanATemplateAndReturnAsArrays(template, "cloudformation-template", accountId);
    }
    async scanATerraformTemplateAndReturAsArrays(template, accountId) {
        return await this.scanATemplateAndReturnAsArrays(template, "terraform-template", accountId);
    }
    // Private helper functions
    /**
     * Sends a HTTP request to Cloud Posture endpoint.
     * @param method HTTP Method
     * @param path path to be appended to Cloud Posture endpoint
     * @param data Optional parameter with json data to be submitted with the request.
     */
    async ccRequest(method, path, data) {
        try {
            return this.parseAxiosOutput(await axios_1.default(this.generateRequest(method, path, data ? data : undefined)));
        }
        catch (error) {
            return await this.parseAxiosError(error);
        }
    }
    ;
    async parseAxiosError(error) {
        // Error ðŸ˜¨
        if (error.response) {
            /*
            * The request was made and the server responded with a
            * status code that falls out of the range of 2xx
            */
            return error.response.data;
        }
        else if (error.request) {
            /*
            * The request was made but no response was received, `error.request`
            * is an instance of XMLHttpRequest in the browser and an instance
            * of http.ClientRequest in Node.js
            */
            return error.request;
        }
        else {
            // Something happened in setting up the request and triggered an Error
            return error.message;
        }
    }
    ;
}
exports.CloudConformity = CloudConformity;
//# sourceMappingURL=cloudconformity.js.map