export declare class CloudConformity {
    apikey: string;
    url: string;
    constructor(apikey: string);
    listAllAccounts(): Promise<any>;
    getAccountDetails(id: string): Promise<any>;
    getAccountScanSetting(id: string): Promise<any>;
    scanAccount(ccAccountId: string): Promise<any>;
    updateAccount(ccAccountId: string, environment: string, tags: [string]): Promise<any>;
    /**
     * @TODO: Implement notes
     * @param ccAccountId target account id
     * @param ruleId target rule id
     * @param notes optional parameter to get notes for the specified rule setting
     */
    getRuleSetting(ccAccountId: string, ruleId: string, notes?: boolean): Promise<any>;
    listTemplateScannerRules(type?: string): Promise<any>;
    scanATemplate(template: string, type: string, accountId?: string): Promise<any>;
    scanACloudFormationTemplate(template: string, accountId?: string): Promise<any>;
    scanATerraformTemplate(template: string, accountId?: string): Promise<any>;
    scanATemplateAndReturnAsArrays(template: string, type: string, accountId?: string): Promise<{
        success: any[];
        failure: any[];
    }>;
    scanACloudFormationTemplateAndReturAsArrays(template: string, accountId?: string): Promise<{
        success: any[];
        failure: any[];
    }>;
    scanATerraformTemplateAndReturAsArrays(template: string, accountId?: string): Promise<{
        success: any[];
        failure: any[];
    }>;
    private ccRequest;
    private generateRequest;
    private parseAxiosOutput;
    private parseAxiosError;
}
